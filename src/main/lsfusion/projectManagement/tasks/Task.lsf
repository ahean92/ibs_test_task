MODULE Task;

REQUIRE ProjectManagementSettings, Employee,
        Doc, FileUtils,
        TaskType, TaskStatus, TaskPriority, TaskTag;

PRIORITY MasterData;

NAMESPACE ProjectManagement;

CLASS Task '{Task}';

readonly = ABSTRACT CASE BOOLEAN (Task);

@defineID(task, '{Tasks}', '', 6){
    id '{ID}' = DATA STRING[50] (Task) IN id CHARWIDTH 6 INDEXED;
    task (STRING[50] id) = GROUP AGGR Task o BY id(o);
    
    numeratorTask = DATA Numerator();
    nameNumeratorTask 'Numerator - {Tasks}' = name(numeratorTask());
    
    loadDefaultNumerators () + {
        NEW n = Numerator {
            name(n) <- '{Tasks}';
            series(n) <- '';
            minValue(n) <- 1;
            maxValue(n) <- 999999;
            stringLength(n) <- 6;
            numeratorTask() <- n;
        }
    }
    
    EXTEND FORM options 
        PROPERTIES nameNumeratorTask()
    ;
    
    DESIGN options {
        commons {
            MOVE PROPERTY(nameNumeratorTask());
        }
    }
    
    WHEN SETCHANGED(Task o IS Task AND numeratorTask() AND NOT id(o)) DO {
        id(o) <- CONCAT '', series(numeratorTask()), curStringValue(numeratorTask());
        incrementValueSession(numeratorTask());   
    }
};

name '{Name}' = DATA ISTRING (Task) CHARWIDTH 30 IN id;

idName '{Name}' (Task t) = CONCAT ' ', '#' + id(t), name(t);  

author 'Author' = DATA Employee (Task);
nameAuthor 'Author' (Task t) = name(author(t));
WHEN LOCAL SET(Task t IS Task) AND NOT author(t) AND currentUser() IS Employee DO author(t) <- currentUser();

assignedTo 'Assigned to' = DATA Employee (Task);
nameAssignedTo 'Assigned to' (Task t) = name(assignedTo(t));

deadline 'Deadline' = DATA DATE (Task);

description 'Description' = DATA RICHTEXT (Task) CHARWIDTH 20;

status 'Status' = DATA TaskStatus (Task);
nameStatus 'Status' (Task t) = name(status(t)) IN id;

closed 'Closed' (Task t) = closed(status(t));
opened 'Opened' (Task t) = t IS Task AND NOT closed(t);

type 'Type' = DATA TaskType (Task);
nameType 'Type' (Task t) = name(type(t)) IN id;

WHEN LOCAL SET(Task t IS Task) AND NOT CHANGED(type(t)) DO type(t) <- defaultTaskType();

priority 'Priority' = DATA TaskPriority (Task);
namePriority 'Priority' (Task t) = name(priority(t));
idColorPriority (Task t) = idColor(priority(t));
rgbColorPriority (Task t) = rgbColor(priority(t));

in 'Incl.' = DATA BOOLEAN (Task, TaskTag);
tags 'Tags' (Task t) = GROUP CONCAT name(TaskTag tg) IF in(t, tg), ', ' ORDER name(tg), tg;

onCreate ABSTRACT LIST (Task);

FORM task '{Task}'
    OBJECTS t = Task PANEL
    PROPERTIES(t) id, name, nameStatus, 
                  nameAuthor, nameAssignedTo,
                  nameType, namePriority, tags, 
                  deadline, description

    EDIT Task OBJECT t
;

DESIGN task {
    OBJECTS {
        NEW header {
            NEW main {
                horizontal = TRUE;
                alignment = STRETCH;
                MOVE PROPERTY(id(t)) { flex = 0; };
                MOVE PROPERTY(name(t)) { flex = 1; fontSize = 16; }
            }
            NEW params {
                lines = 2;
                alignment = STRETCH;
                MOVE PROPERTY(nameStatus(t));
                MOVE PROPERTY(nameAuthor(t));
                MOVE PROPERTY(nameAssignedTo(t));
                MOVE PROPERTY(nameType(t));
                MOVE PROPERTY(namePriority(t));
                MOVE PROPERTY(tags(t));
                MOVE PROPERTY(deadline(t));
            }
        }
        NEW details {
            tabbed = TRUE;
            fill = 1;
            NEW description {
                caption = 'Description';
                MOVE PROPERTY(description(t)) { caption = ''; fill = 1; }
            }
        }
    }
}


FORM tasks '{Tasks}'
    OBJECTS t = Task BACKGROUND rgbColorPriority(t)
    PROPERTIES(t) READONLY 
                  id, name, nameAuthor, nameAssignedTo, nameStatus, nameType, namePriority, tags, deadline, closed
    PROPERTIES(t) NEWSESSION NEW, EDIT, DELETE

    FILTERGROUP active
        FILTER 'Opened' opened(t) 'F8' DEFAULT
        FILTER 'Closed' closed(t) 'F7'

    FILTERGROUP my
        FILTER 'My tasks' author(t) = currentUser() 'F6'
        FILTER 'Assigned to me' assignedTo(t) = currentUser() 'F5'
    
    LIST Task OBJECT t
;

@defineDocObjectsForm(tasks, t, '{Tasks}'){
    DESIGN tasks {
        OBJECTS {
            NEW pane {
                fill = 1;
                horizontal = TRUE;
                NEW tabbedPane {
                    tabbed = TRUE;
                    fill = 1000;
                    MOVE BOX(t) { caption = '{Tasks}'; }
                }
                NEW rightPane {
                    tabbed = TRUE;
//                    width = 230;
                    fill = 1;
                    NEW filters {
                        caption = 'Filters';
                        alignment = STRETCH;
                        MOVE FILTERGROUPS(t) {
                            horizontal = FALSE;
                            alignment = STRETCH;
                        }
                    }
                    NEW actions {
                        alignment = STRETCH;
                        caption = 'Actions';
                        NEW statuses {
                            alignment = STRETCH;
                            caption = 'Change status';
                        }
                    }
                }
            }
        }
    }
};

@defineObjectFiles(task, t, 'Task file'){

    CLASS TaskFile 'Task file';

    task = DATA Task (TaskFile) INDEXED NONULL DELETE;

    file = DATA RAWFILE (TaskFile);

    name '{Name}' = DATA ISTRING (TaskFile) CHARWIDTH 15;
    extension 'Extension' = DATA ISTRING (TaskFile) CHARWIDTH 5;
    nameExtension (TaskFile f) = CONCAT '.', name(f), extension(f);

    description 'Description' = DATA ISTRING (TaskFile) CHARWIDTH 20;

    dateTime 'Date' = DATA DATETIME (TaskFile);
    dateTime(TaskFile f) <- currentDateTime() WHEN SET(f IS TaskFile);

    user = DATA User (TaskFile);
    nameUser 'User' (TaskFile f) = name(user(f));
    user(TaskFile f) <- currentUser() WHEN SET(f IS TaskFile);

    open 'Open' (TaskFile f) { open(file(f), nameExtension(f)); } IMAGE 'open.png';

    countFiles 'Files' (Task i) = GROUP SUM 1 IF task(TaskFile f) = i;

    index '{Index}' (TaskFile f) = PARTITION SUM 1 ORDER f BY task(f) MATERIALIZED CHARWIDTH 3;
    file (Task o, INTEGER i) = GROUP MIN TaskFile f IF task(f) = o AND index(f) = i;
    openFile(Task o, INTEGER i) { open(file(o, i)); }
    
    file1 (Task o) = file(o, 1);
    file2 (Task o) = file(o, 2);
    file3 (Task o) = file(o, 3);
    openFile1 'File 1' (Task o) { openFile(o, 1); }
    openFile2 'File 2' (Task o) { openFile(o, 2); }
    openFile3 'File 3' (Task o) { openFile(o, 3); }

    firstFile (Task i) = GROUP MIN TaskFile f IF task(f) = i;
    openFirstFile 'Open' (Task i) { open(firstFile(i)); }
    openFiles 'Open' (Task i) {
        FOR task(TaskFile f) = i DO
            open(f);
    }

    newFile 'File' (Task o) {
        INPUT uf = NAMEDFILE DO NEW uof = TaskFile {
            task(uof) <- o;
            file(uof) <- RAWFILE(uf);
            name(uof) <- name(uf);
            extension(uof) <- extension(uf);
        }
    } IMAGE 'add.png' CHANGEKEY 'INSERT' HIDE;

    @defineObjectFilesForm(task, task, t){
    EXTEND FORM task
        OBJECTS of = TaskFile
        PROPERTIES(of) READONLY index
        PROPERTIES(of) READONLYIF readonly(t) name, extension, description
        PROPERTIES(of) READONLY nameUser, dateTime
        PROPERTIES(of) GRID open, DELETE READONLYIF readonly(t)
        FILTERS task(of) = t

        PROPERTIES(t) newFile DRAW of TOOLBAR READONLYIF readonly(t)
        PROPERTIES inputFile = '' CUSTOM 'inputFile' ON CHANGE {
            INPUT f = JSON DO
                IMPORT JSON FROM f FIELDS() STRING name, STRING extension, STRING data DO 
                    IF NOT readonly(t) THEN NEW uof = TaskFile {
                        task(uof) <- t;
                        file(uof) <- decode(data, 'base64');
                        name(uof) <- name;
                        extension(uof) <- extension;
                    }
        }
    ;

    DESIGN task {
        details {
            NEW files {
                caption = badged('Files', countFiles(t));
                MOVE BOX(of) { caption = ''; }
                MOVE PROPERTY(inputFile);
            }
        }
    }
    
    // preview
    
    EXTEND FORM task
        PROPERTIES() READONLY previewPdfFile SHOWIF previewPdfFile(), previewImageFile SHOWIF NOT previewPdfFile()

        EVENTS ON CHANGE of {
            previewPdfFile() <- NULL;
            previewImageFile() <- NULL;
            IF lower(extension(of)) = 'jpg' OR lower(extension(of)) = 'jpeg' OR lower(extension(of)) = 'png' OR lower(extension(of)) = 'bmp' THEN {
                previewImageFile() <- IMAGEFILE(file(of));
            }
            IF lower(extension(of)) = 'pdf' THEN {
                previewPdfFile() <- PDFFILE(file(of));
            }
            IF lower(extension(of)) = 'doc' OR lower(extension(of)) = 'docx' THEN {
                TRY {
                    wordToPdf(file(of));
                } CATCH {}
                previewPdfFile() <- exportPdfFile();
            }
        }
    ;

    DESIGN task {
        files {
            horizontal = TRUE;
            NEW preview {
                fill = 4;
                MOVE PROPERTY(previewPdfFile()) { fill = 1; size = (100, 100); caption = ''; }
                MOVE PROPERTY(previewImageFile()) { fill = 1; size = (100, 100); caption = ''; }
            }
        }
    }

};

};

DESIGN tasks {
    PROPERTY(tags(t)) { valueHeight = 18; }
}

NAVIGATOR {
    operations {
        NEW tasks;
    }
}