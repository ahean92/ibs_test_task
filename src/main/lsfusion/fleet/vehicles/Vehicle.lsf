MODULE Vehicle;

REQUIRE VehicleModel, Company, FuelType, VehicleCategory, FileUtils, Icon;

NAMESPACE Fleet;

CLASS Vehicle 'Vehicle';

readonly = ABSTRACT CASE BOOLEAN (Vehicle);

@defineID(vehicle, 'Vehicles', 'VH', 3){
    id '{ID}' = DATA STRING[50] (Vehicle) IN id CHARWIDTH 3 INDEXED;
    vehicle (STRING[50] id) = GROUP AGGR Vehicle o BY id(o);
    
    numeratorVehicle = DATA Numerator();
    nameNumeratorVehicle 'Numerator - Vehicles' = name(numeratorVehicle());
    
    loadDefaultNumerators () + {
        IF NOT GROUP SUM 1 IF name(Numerator n) = 'Vehicles' THEN {
            NEW n = Numerator {
                name(n) <- 'Vehicles';
                series(n) <- 'VH';
                minValue(n) <- 1;
                maxValue(n) <- 999999;
                stringLength(n) <- 3;
                numeratorVehicle() <- n;
            }
        }
    }
    
    EXTEND FORM options 
        PROPERTIES nameNumeratorVehicle()
    ;
    
    DESIGN options {
        commons {
            MOVE PROPERTY(nameNumeratorVehicle());
        }
    }
    
    WHEN SETCHANGED(Vehicle o IS Vehicle AND numeratorVehicle() AND NOT id(o)) DO {
        id(o) <- CONCAT '', series(numeratorVehicle()), curStringValue(numeratorVehicle());
        incrementValueSession(numeratorVehicle());   
    }
};

model 'Vehicle model' = DATA VehicleModel (Vehicle);
nameModel 'Vehicle model' (Vehicle v) = name(model(v));

licensePlate 'License plate' = DATA STRING[20] (Vehicle);

name '{Name}' (Vehicle v) = CONCAT ' / ', nameModel(v), licensePlate(v) CHARWIDTH 25;

VIN r'VIN' = DATA STRING[17] (Vehicle);

company 'Company' = DATA Company (Vehicle);
nameCompany 'Company' (Vehicle v) = name(company(v));

vehicleCategory 'Vehicle category' = DATA VehicleCategory (Vehicle);
nameVehicleCategory 'Vehicle category' (Vehicle v) = name(vehicleCategory(v));

color 'Color' = DATA ISTRING[50] (Vehicle);

yearOfManufacture 'Year of manufacture' = DATA INTEGER (Vehicle);

seatsNumber 'Seats number' = DATA INTEGER (Vehicle);
doorsNumber 'Doors number' = DATA INTEGER (Vehicle);

engineDisplacement 'Engine displacement, cc' = DATA INTEGER (Vehicle);

automaticTransmission 'Automatic transmission' = DATA BOOLEAN (Vehicle);

fuelType 'Fuel type' = DATA FuelType (Vehicle);
nameFuelType 'Fuel type' (Vehicle v) = name(fuelType(v));

note 'Note' = DATA ISTRING (Vehicle) CHARWIDTH 20;

description 'Description' = DATA RICHTEXT (Vehicle);

FORM vehicle 'Vehicle'
    OBJECTS v = Vehicle PANEL
    PROPERTIES(v) READONLYIF readonly(v)
                  id, nameModel, licensePlate, VIN, nameCompany,
                  nameVehicleCategory, color, yearOfManufacture,
                  seatsNumber, doorsNumber,
                  automaticTransmission, nameFuelType, engineDisplacement,
                  note, description

    EDIT Vehicle OBJECT v
;

DESIGN vehicle {
    OBJECTS {
        NEW actions {
            caption = 'Actions';
            horizontal = TRUE;
            alignment = STRETCH;
        }
        NEW pane {
            horizontal = TRUE;
            fill = 1;
            NEW leftPane {
                fill = 2;
                width = 400;
                NEW header {
                    lines = 2;
                    alignment = STRETCH;
                    MOVE PROPERTY(id(v));
                    MOVE PROPERTY(nameModel(v));
                    MOVE PROPERTY(licensePlate(v));
                    MOVE PROPERTY(VIN(v));
                    MOVE PROPERTY(nameCompany(v));
                }
                NEW model {
                    caption = 'Model';
                    lines = 2;
                    alignment = STRETCH;
                    MOVE PROPERTY(nameVehicleCategory(v));
                    MOVE PROPERTY(color(v));
                    MOVE PROPERTY(yearOfManufacture(v));
                    MOVE PROPERTY(seatsNumber(v));
                    MOVE PROPERTY(doorsNumber(v));
                }
                NEW engine {
                    caption = 'Engine';
                    lines = 2;
                    alignment = STRETCH;
                    MOVE PROPERTY(automaticTransmission(v));
                    MOVE PROPERTY(nameFuelType(v));
                    MOVE PROPERTY(engineDisplacement(v));
                }
                MOVE PROPERTY(note(v));
                NEW details {
                    fill = 1;
                    tabbed = TRUE;
                    MOVE PROPERTY(description(v));
                }
            }
            NEW rightPane {
                fill = 1;
                width = 200;
            }
        }
    }
}

@defineObjectComments(vehicle, v, rightPane){
    CLASS VehicleComment 'Comment';
    
    vehicle = DATA Vehicle (VehicleComment) NONULL DELETE INDEXED;
    countComment (Vehicle e) = GROUP SUM 1 IF vehicle(VehicleComment c) = e MATERIALIZED;
    lastComment (Vehicle e) = GROUP LAST VehicleComment c ORDER c BY vehicle(c) MATERIALIZED;
    
    dateTime 'Date' = DATA DATETIME (VehicleComment);
    dateTime(VehicleComment f) <- currentDateTime() WHEN SET(f IS VehicleComment);

    textTimeDuration (VehicleComment c) = textTimeDuration(dateTime(c));
    
    user = DATA User (VehicleComment);
    nameUser 'User' (VehicleComment f) = name(user(f));
    user(VehicleComment f) <- currentUser() WHEN SET(f IS VehicleComment);
    
    text 'Text' = DATA RICHTEXT (VehicleComment);
    
    header = ABSTRACT VALUE HTMLTEXT (VehicleComment);
    footer = ABSTRACT VALUE HTMLTEXT (VehicleComment);
    html (VehicleComment c) = CONCAT '', header(c), text(c), footer(c);
    
    FORM editVehicleComment 'Comment'
        OBJECTS c = VehicleComment PANEL
        PROPERTIES(c) '' = text
    ;
    
    DESIGN editVehicleComment {
        size = (640, 480);
        OBJECTS {
            MOVE PROPERTY(text(c)) { fill = 1; }
        }
    }
    
    EXTEND FORM vehicle
        OBJECTS cmt = VehicleComment CUSTOM 'comments'
        PROPERTIES id = VALUE(cmt)
        PROPERTIES(cmt) nameUser, textTimeDuration, dateTime, text = html
        PROPERTIES(cmt) edit ON CHANGE {
            SHOW editVehicleComment OBJECTS c = cmt;
        },
            delete = DELETE
        ORDERS id DESC
        FILTERS vehicle(cmt) = v
    ;
    
    newComment 'Add' (Vehicle t) {
        IF inputComment() THEN
            NEW nc = VehicleComment {
                vehicle(nc) <- t;
                text(nc) <- inputComment();
                inputComment() <- NULL;
            }
    }
    
    EXTEND FORM vehicle
        PROPERTIES inputComment(), newComment(v)
        
        EVENTS ON APPLY { newComment(v); }
    ;
    
    DESIGN vehicle {
        rightPane {
            NEW comments {
                fill = 1;
                caption = badged('Comments', countComment(v));
                NEW inputComment {
                    horizontal = TRUE;
                    alignment = STRETCH;
                    MOVE PROPERTY(inputComment()) {
                        valueHeight = -1;
                        fill = 1;
                    }
                    MOVE PROPERTY(newComment(v)) {
                        alignment = STRETCH;
                    }
                }
                MOVE GRID(cmt) {
                    height = 200;
                    width = 400;
                    fill = 1;
                }
                REMOVE BOX(cmt);
            }
        }
    }
};
@defineObjectFiles(vehicle, v, 'Vehicle file'){

    CLASS VehicleFile 'Vehicle file';

    vehicle = DATA Vehicle (VehicleFile) INDEXED NONULL DELETE;

    file = DATA RAWFILE (VehicleFile);

    name '{Name}' = DATA ISTRING (VehicleFile) CHARWIDTH 15;
    extension 'Extension' = DATA ISTRING (VehicleFile) CHARWIDTH 5;
    nameExtension (VehicleFile f) = CONCAT '.', name(f), extension(f);
    
    fileExtension (VehicleFile f) = file(file(f), extension(f));
    namedFile (VehicleFile f) = namedFile(file(f), name(f), extension(f));

    description 'Description' = DATA ISTRING (VehicleFile) CHARWIDTH 20;

    dateTime 'Date' = DATA DATETIME (VehicleFile);
    dateTime(VehicleFile f) <- currentDateTime() WHEN SET(f IS VehicleFile);

    user = DATA User (VehicleFile);
    nameUser 'User' (VehicleFile f) = name(user(f));
    user(VehicleFile f) <- currentUser() WHEN SET(f IS VehicleFile);

    open 'Open' (VehicleFile f) { open(file(f), nameExtension(f)); } IMAGE 'open.png';

    countFiles 'Files' (Vehicle i) = GROUP SUM 1 IF vehicle(VehicleFile f) = i;

    index '{Index}' (VehicleFile f) = PARTITION SUM 1 ORDER f BY vehicle(f) MATERIALIZED CHARWIDTH 3;
    file (Vehicle o, INTEGER i) = GROUP MIN VehicleFile f IF vehicle(f) = o AND index(f) = i;
    openFile(Vehicle o, INTEGER i) { open(file(o, i)); }
    
    file1 (Vehicle o) = file(o, 1);
    file2 (Vehicle o) = file(o, 2);
    file3 (Vehicle o) = file(o, 3);
    openFile1 'File 1' (Vehicle o) { openFile(o, 1); }
    openFile2 'File 2' (Vehicle o) { openFile(o, 2); }
    openFile3 'File 3' (Vehicle o) { openFile(o, 3); }

    firstFile (Vehicle i) = GROUP MIN VehicleFile f IF vehicle(f) = i;
    openFirstFile 'Open' (Vehicle i) { open(firstFile(i)); }
    openFiles 'Open' (Vehicle i) {
        FOR vehicle(VehicleFile f) = i DO
            open(f);
    }

    newFile 'File' (Vehicle o) {
        INPUT uf = NAMEDFILE DO NEW uof = VehicleFile {
            vehicle(uof) <- o;
            file(uof) <- RAWFILE(uf);
            name(uof) <- name(uf);
            extension(uof) <- extension(uf);
        }
    } IMAGE 'add.png' CHANGEKEY 'INSERT' HIDE;
        
    downloadVehicleFile (LONG id) {
        FOR LONG(VehicleFile f AS VehicleFile) = id DO {
            exportNamedFile() <- namedFile(f);
        } 
    } @@api;
        
    @defineObjectFilesForm(vehicle, vehicle, v){
    EXTEND FORM vehicle
        OBJECTS of = VehicleFile
        PROPERTIES(of) READONLY index
        PROPERTIES(of) READONLYIF readonly(v) name, extension, description
        PROPERTIES(of) READONLY nameUser, dateTime
        PROPERTIES(of) GRID open, DELETE READONLYIF readonly(v)
        FILTERS vehicle(of) = v

        PROPERTIES(v) newFile DRAW of TOOLBAR READONLYIF readonly(v)
        PROPERTIES inputFile = '' CUSTOM 'inputFile' ON CHANGE {
            INPUT f = JSON DO
                IMPORT JSON FROM f FIELDS() STRING name, STRING extension, STRING data DO 
                    IF NOT readonly(v) THEN NEW uof = VehicleFile {
                        vehicle(uof) <- v;
                        file(uof) <- decode(data, 'base64');
                        name(uof) <- name;
                        extension(uof) <- extension;
                    }
        }
    ;

    DESIGN vehicle {
        details {
            NEW files {
                caption = badged('Files', countFiles(v));
                MOVE BOX(of) { width = 600; caption = ''; }
                MOVE PROPERTY(inputFile);
            }
        }
    }
    
    // preview
    
    EXTEND FORM vehicle
        PROPERTIES() READONLY previewPdfFile SHOWIF previewPdfFile(), previewImageFile SHOWIF NOT previewPdfFile()

        EVENTS ON CHANGE of {
            previewPdfFile() <- NULL;
            previewImageFile() <- NULL;
            IF lower(extension(of)) = 'jpg' OR lower(extension(of)) = 'jpeg' OR lower(extension(of)) = 'png' OR lower(extension(of)) = 'bmp' THEN {
                previewImageFile() <- IMAGEFILE(file(of));
            }
            IF lower(extension(of)) = 'pdf' THEN {
                previewPdfFile() <- PDFFILE(file(of));
            }
            IF lower(extension(of)) = 'doc' OR lower(extension(of)) = 'docx' THEN {
                TRY {
                    wordToPdf(file(of));
                } CATCH {}
                previewPdfFile() <- exportPdfFile();
            }
        }
    ;

    DESIGN vehicle {
        files {
            horizontal = TRUE;
            height = 300;
            NEW preview {
                width = 300;
                height = 600;
                fill = 4;
                MOVE PROPERTY(previewPdfFile()) { fill = 1; size = (100, 100); caption = ''; }
                MOVE PROPERTY(previewImageFile()) { fill = 1; size = (100, 100); caption = ''; }
            }
        }
    }

};

};

FORM vehicles 'Vehicles'
    OBJECTS v = Vehicle
    PROPERTIES(v) READONLYIF isReadonly() 
                           id, nameModel, licensePlate, VIN, nameCompany,
                           nameVehicleCategory, color, yearOfManufacture,
                           seatsNumber, doorsNumber,
                           automaticTransmission, nameFuelType, engineDisplacement,
                           note

    PROPERTIES(v) NEWSESSION NEW, EDIT, DELETE
;

@extendFormEditable(vehicles){
    EXTEND FORM vehicles
        PROPERTIES() isEditable
    ;
    DESIGN vehicles {
        TOOLBARBOX {
            MOVE PROPERTY(isEditable()) BEFORE TOOLBARRIGHT;
        }
    }
};

FORM dialogVehicles 'Vehicles'
    OBJECTS v = Vehicle
    PROPERTIES(v) READONLY id, nameModel, licensePlate, VIN, nameCompany

    LIST Vehicle OBJECT v
;

NAVIGATOR {
    operations {
        NEW vehicles;
    }
}
