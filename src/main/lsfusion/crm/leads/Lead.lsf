MODULE Lead;

REQUIRE CRMSettings, Employee, DateUtils, ObjectUtils,
        Doc, FileUtils, Comments, Activity,
        LeadType, LeadPriority, LeadTag, LeadStatus;

NAMESPACE CRM;

CLASS Lead '{Lead}';

readonly = ABSTRACT CASE BOOLEAN (Lead);

dateTime 'Date' = DATA DATETIME (Lead) NONULL IN id;
WHEN LOCAL SET (Lead l IS Lead) AND NOT CHANGED(dateTime(l)) DO dateTime(l) <- currentDateTime();
@defineDateTimeAggregation(Lead){
    @defineDateTimeAggregation(Lead, , ){
    date 'Date' (Lead o) = DATE(dateTime(o));
    
    @defineDateAggregation(Lead, , date, ){
    nameDOW 'Day of week' (Lead o) = extractDOWName(date(o));
    week 'Week' (Lead o) = extractWeek(date(o));
    
    numberMonth 'Month number' (Lead o) = extractMonthNumber(date(o));
    nameMonth 'Month' (Lead o) = extractMonthName(date(o));
    year 'Year' (Lead o) = extractYear(date(o));
};

    minute 'Minute' (Lead o) = extractMinute(dateTime(o));
    hour 'Hour' (Lead o) = extractHour(dateTime(o));
};
};

@defineID(lead, 'Leads', '', 6){
    id '{ID}' = DATA STRING[50] (Lead) IN id CHARWIDTH 6 INDEXED;
    lead (STRING[50] id) = GROUP AGGR Lead o BY id(o);
    
    numeratorLead = DATA Numerator();
    nameNumeratorLead 'Numerator - Leads' = name(numeratorLead());
    
    loadDefaultNumerators () + {
        NEW n = Numerator {
            name(n) <- 'Leads';
            series(n) <- '';
            minValue(n) <- 1;
            maxValue(n) <- 999999;
            stringLength(n) <- 6;
            numeratorLead() <- n;
        }
    }
    
    EXTEND FORM options 
        PROPERTIES nameNumeratorLead()
    ;
    
    DESIGN options {
        commons {
            MOVE PROPERTY(nameNumeratorLead());
        }
    }
    
    WHEN SETCHANGED(Lead o IS Lead AND numeratorLead() AND NOT id(o)) DO {
        id(o) <- CONCAT '', series(numeratorLead()), curStringValue(numeratorLead());
        incrementValueSession(numeratorLead());   
    }
};

@definePropertyObject(lead){
    property = ABSTRACT VALUE ISTRING (Lead, STRING);
    propertyLead = ABSTRACT VALUE BOOLEAN (STRING);
    propertyLongLead = ABSTRACT VALUE BOOLEAN (STRING);

    htmlShortListProperties (Lead o) = 
        '<ul style="color:#959595">' + 
            (GROUP CONCAT ('<li>' + STRING p + ' : ' + property(o, p) + '</li>') IF NOT propertyLongLead(p), '' 
                   ORDER p) + 
        '</ul>';
    
    @defineHistoryObject(lead){
    CLASS LeadHistory 'Change history';

    lead = DATA Lead (LeadHistory) INDEXED;
    countHistories (Lead d) = GROUP SUM 1 IF lead(LeadHistory h) = d;

    dateTime 'Date' = DATA DATETIME (LeadHistory);

    user = DATA User (LeadHistory);
    nameUser 'User' (LeadHistory l) = name(user(l));

    computer = DATA Computer (LeadHistory);
    hostnameComputer 'Computer' (LeadHistory l) = hostname(computer(l)) CHARWIDTH 10;

    type 'Type' = DATA ISTRING[100] (LeadHistory) CHARWIDTH 15;
    description 'Description' = DATA TEXT (LeadHistory);

    firstHistory (Lead d) = GROUP LAST LeadHistory h ORDER DESC h WHERE lead(h) = d MATERIALIZED;
    nameUserFirstHistory 'Created by' (Lead d) = nameUser(firstHistory(d));
    dateTimeFirstHistory 'Created at' (Lead d) = dateTime(firstHistory(d));

    lastHistory (Lead d) = GROUP LAST LeadHistory h ORDER h WHERE lead(h) = d MATERIALIZED;
    nameUserLastHistory 'Last modified by' (Lead d) = nameUser(lastHistory(d));
    dateTimeLastHistory 'Last modified at' (Lead d) = dateTime(lastHistory(d));
};
};

name '{Name}' = DATA ISTRING (Lead) CHARWIDTH 30 IN id;
@definePropertyValue(lead, name, '{Name}'){
    @definePropertyValue(lead, name, '{Name}', name){
    property (Lead l, STRING p) += ISTRING(name(l)) IF p = '{Name}';
    propertyLead (STRING p) += p = '{Name}';

    @defineHistoryProperty(lead, name, '{Name}', name){
    WHEN CHANGED(name(Lead let)) AND NOT DROPPED(let IS Lead) AND NOT disableHistory() DO {
        NEW l = LeadHistory {
            lead(l) <- let;
            dateTime(l) <- currentDateTime();
            user(l) <- currentUser();
            computer(l) <- currentComputer();
            type(l) <- '{Name}';
            description (l) <- CONCAT ' -> ', PREV(name(let)), (OVERRIDE ISTRING(name(let)), '');
        }
    }
};
};
};
propertyLongLead (STRING p) += p = '{Name}';

idName '{Name}' (Lead l) = CONCAT ' ', '#' + id(l), name(l);

prefixName = ABSTRACT VALUE ISTRING (Lead);
fullName (Lead l) = CONCAT ' - ', prefixName(l), name(l);

customer 'Customer' = DATA Partner (Lead) INDEXED;
nameCustomer 'Customer' (Lead l) = name(customer(l));
@definePropertyValue(lead, customer, 'Customer', nameCustomer){
    property (Lead l, STRING p) += ISTRING(nameCustomer(l)) IF p = 'Customer';
    propertyLead (STRING p) += p = 'Customer';

    @defineHistoryProperty(lead, customer, 'Customer', nameCustomer){
    WHEN CHANGED(customer(Lead let)) AND NOT DROPPED(let IS Lead) AND NOT disableHistory() DO {
        NEW l = LeadHistory {
            lead(l) <- let;
            dateTime(l) <- currentDateTime();
            user(l) <- currentUser();
            computer(l) <- currentComputer();
            type(l) <- 'Customer';
            description (l) <- CONCAT ' -> ', PREV(nameCustomer(let)), (OVERRIDE ISTRING(nameCustomer(let)), '');
        }
    }
};
};

prefixName (Lead l) += nameCustomer(l);

countLeads (Partner p) = GROUP SUM 1 IF customer(Lead l) = p;  

salesPerson 'Sales person' = DATA Employee (Lead);
nameSalesPerson 'Sales person' (Lead l) = name(salesPerson(l));
WHEN LOCAL SET(Lead l IS Lead) AND NOT salesPerson(l) AND currentUser() IS Employee DO salesPerson(l) <- currentUser();
@definePropertyValue(lead, salesPerson, 'Sales person', nameSalesPerson){
    property (Lead l, STRING p) += ISTRING(nameSalesPerson(l)) IF p = 'Sales person';
    propertyLead (STRING p) += p = 'Sales person';

    @defineHistoryProperty(lead, salesPerson, 'Sales person', nameSalesPerson){
    WHEN CHANGED(salesPerson(Lead let)) AND NOT DROPPED(let IS Lead) AND NOT disableHistory() DO {
        NEW l = LeadHistory {
            lead(l) <- let;
            dateTime(l) <- currentDateTime();
            user(l) <- currentUser();
            computer(l) <- currentComputer();
            type(l) <- 'Sales person';
            description (l) <- CONCAT ' -> ', PREV(nameSalesPerson(let)), (OVERRIDE ISTRING(nameSalesPerson(let)), '');
        }
    }
};
};

expectedClosing 'Expected closing' = DATA DATE (Lead);
@defineDateAggregation(Lead, expectedClosing, expectedClosing, 'Expected closing '){
    expectedClosingNameDOW 'Expected closing Day of week' (Lead o) = extractDOWName(expectedClosing(o));
    expectedClosingWeek 'Expected closing Week' (Lead o) = extractWeek(expectedClosing(o));
    
    expectedClosingNumberMonth 'Expected closing Month number' (Lead o) = extractMonthNumber(expectedClosing(o));
    expectedClosingNameMonth 'Expected closing Month' (Lead o) = extractMonthName(expectedClosing(o));
    expectedClosingYear 'Expected closing Year' (Lead o) = extractYear(expectedClosing(o));
};
@definePropertyValue(lead, expectedClosing, 'Expected closing'){
    @definePropertyValue(lead, expectedClosing, 'Expected closing', expectedClosing){
    property (Lead l, STRING p) += ISTRING(expectedClosing(l)) IF p = 'Expected closing';
    propertyLead (STRING p) += p = 'Expected closing';

    @defineHistoryProperty(lead, expectedClosing, 'Expected closing', expectedClosing){
    WHEN CHANGED(expectedClosing(Lead let)) AND NOT DROPPED(let IS Lead) AND NOT disableHistory() DO {
        NEW l = LeadHistory {
            lead(l) <- let;
            dateTime(l) <- currentDateTime();
            user(l) <- currentUser();
            computer(l) <- currentComputer();
            type(l) <- 'Expected closing';
            description (l) <- CONCAT ' -> ', PREV(expectedClosing(let)), (OVERRIDE ISTRING(expectedClosing(let)), '');
        }
    }
};
};
};

description 'Description' = DATA RICHTEXT (Lead) CHARWIDTH 20;

status 'Status' = DATA LeadStatus (Lead);
nameStatus 'Status' (Lead l) = name(status(l)) IN id;
@definePropertyValue(lead, status, 'Status', nameStatus){
    property (Lead l, STRING p) += ISTRING(nameStatus(l)) IF p = 'Status';
    propertyLead (STRING p) += p = 'Status';

    @defineHistoryProperty(lead, status, 'Status', nameStatus){
    WHEN CHANGED(status(Lead let)) AND NOT DROPPED(let IS Lead) AND NOT disableHistory() DO {
        NEW l = LeadHistory {
            lead(l) <- let;
            dateTime(l) <- currentDateTime();
            user(l) <- currentUser();
            computer(l) <- currentComputer();
            type(l) <- 'Status';
            description (l) <- CONCAT ' -> ', PREV(nameStatus(let)), (OVERRIDE ISTRING(nameStatus(let)), '');
        }
    }
};
};

status (Lead l) <- firstLeadStatus() WHEN SET(l IS Lead);

closed 'Closed' (Lead l) = closed(status(l));
opened 'Opened' (Lead l) = l IS Lead AND NOT closed(l);

type 'Type' = DATA LeadType (Lead);
nameType 'Type' (Lead t) = name(type(t)) IN id;
@definePropertyValue(lead, type, 'Type', nameType){
    property (Lead l, STRING p) += ISTRING(nameType(l)) IF p = 'Type';
    propertyLead (STRING p) += p = 'Type';

    @defineHistoryProperty(lead, type, 'Type', nameType){
    WHEN CHANGED(type(Lead let)) AND NOT DROPPED(let IS Lead) AND NOT disableHistory() DO {
        NEW l = LeadHistory {
            lead(l) <- let;
            dateTime(l) <- currentDateTime();
            user(l) <- currentUser();
            computer(l) <- currentComputer();
            type(l) <- 'Type';
            description (l) <- CONCAT ' -> ', PREV(nameType(let)), (OVERRIDE ISTRING(nameType(let)), '');
        }
    }
};
};

WHEN LOCAL SET(Lead t IS Lead) AND NOT CHANGED(type(t)) DO type(t) <- defaultLeadType();

WHEN LOCAL SETCHANGED(type(Lead l)) AND NOT allow(type(l), status(l)) DO
    status(l) <- firstLeadStatus(type(l));     

CONSTRAINT SETCHANGED(status(Lead l)) AND type(l) AND NOT allow(type(l), status(l))
    CHECKED BY status[Lead]
    MESSAGE 'Status is not allowed for the selected type';

priority 'Priority' = DATA LeadPriority (Lead);
namePriority 'Priority' (Lead l) = name(priority(l));
idColorPriority (Lead l) = idColor(priority(l));
rgbColorPriority (Lead l) = rgbColor(priority(l));
@definePropertyValue(lead, priority, 'Priority', namePriority){
    property (Lead l, STRING p) += ISTRING(namePriority(l)) IF p = 'Priority';
    propertyLead (STRING p) += p = 'Priority';

    @defineHistoryProperty(lead, priority, 'Priority', namePriority){
    WHEN CHANGED(priority(Lead let)) AND NOT DROPPED(let IS Lead) AND NOT disableHistory() DO {
        NEW l = LeadHistory {
            lead(l) <- let;
            dateTime(l) <- currentDateTime();
            user(l) <- currentUser();
            computer(l) <- currentComputer();
            type(l) <- 'Priority';
            description (l) <- CONCAT ' -> ', PREV(namePriority(let)), (OVERRIDE ISTRING(namePriority(let)), '');
        }
    }
};
};

in 'Incl.' = DATA BOOLEAN (Lead, LeadTag);
tags 'Tags' (Lead l) = GROUP CONCAT name(LeadTag tg) IF in(l, tg), ', ' ORDER name(tg), tg;
@definePropertyValue(lead, tags, 'Tags'){
    @definePropertyValue(lead, tags, 'Tags', tags){
    property (Lead l, STRING p) += ISTRING(tags(l)) IF p = 'Tags';
    propertyLead (STRING p) += p = 'Tags';

    @defineHistoryProperty(lead, tags, 'Tags', tags){
    WHEN CHANGED(tags(Lead let)) AND NOT DROPPED(let IS Lead) AND NOT disableHistory() DO {
        NEW l = LeadHistory {
            lead(l) <- let;
            dateTime(l) <- currentDateTime();
            user(l) <- currentUser();
            computer(l) <- currentComputer();
            type(l) <- 'Tags';
            description (l) <- CONCAT ' -> ', PREV(tags(let)), (OVERRIDE ISTRING(tags(let)), '');
        }
    }
};
};
};

// revenue

expectedRevenue 'Expected revenue' = DATA NUMERIC[12,2] (Lead);
probability 'Probability' = DATA NUMERIC[6,2] (Lead);

// company
phone 'Phone' = DATA ISTRING[100] (Lead) CHARWIDTH 12;
email 'Email' = DATA ISTRING[400] (Lead) CHARWIDTH 20 REGEXP '[\\-!#-\'*+\\/-9=?A-Z^-~]+(\\.[\\-!#-\'*+\\/-9=?A-Z^-~]+)*@[0-9A-Za-z]([0-9A-Za-z\\-]\{0,61\}[0-9A-Za-z])?(\\.[0-9A-Za-z]([0-9A-Za-z\\-]\{0,61\}[0-9A-Za-z])?)+' '{authentication.email.contact.incorrect}' IN id;

leadPhone (ISTRING[100] phone) = GROUP MAX Lead l BY phone(l);
leadEmail (ISTRING[400] email) = GROUP MAX Lead l BY email(l);

address 'Address' = DATA ISTRING[150] (Lead) CHARWIDTH 30;
city 'City' = DATA ISTRING[50] (Lead) CHARWIDTH 12;
state 'State' = DATA ISTRING[50] (Lead) CHARWIDTH 12;
zip 'Postcode' = DATA ISTRING[10] (Lead);

addressCsv 'Address' (Lead l) = CONCAT ', ', address(l), city(l), state(l) IF NOT state(l) = city(l), zip(l) CHARWIDTH 20;
addressLines 'Address' (Lead l) = CONCAT '\n ', address(l), city(l), state(l) IF NOT state(l) = city(l), zip(l);

website 'Web site' = DATA ISTRING[30] (Lead);

legalEntityName 'Legal entity name' = DATA ISTRING[50] (Lead) CHARWIDTH 15;

// contact
firstName '{First_name}' = DATA ISTRING[30] (Lead);
lastName 'Surname' = DATA ISTRING[30] (Lead);
middleName 'Middle name' = DATA ISTRING[30] (Lead);

position = DATA Position (Lead);
namePosition 'Position' (Lead l) = name(position(l));

FORM lead '{Lead}'
    OBJECTS l = Lead PANEL
    PROPERTIES(l) id, name, nameStatus SELECT 'buttonGroup',
                  dateTime, expectedRevenue, probability, expectedClosing,
                  nameType, nameCustomer, nameSalesPerson, 
                  namePriority, tags, 
                  phone, email,
                  description,
                  address, city, state, zip, 
                  legalEntityName, website,
                  firstName, lastName, middleName, namePosition

    EDIT Lead OBJECT l
;

DESIGN lead {
    OBJECTS {
        NEW pane {
            horizontal = TRUE;
            fill = 1;
            NEW leftPane {
                fill = 2;
                width = 400;
                NEW header {
                    alignment = STRETCH;
                    NEW main {
                        horizontal = TRUE;
                        alignment = STRETCH;
                        MOVE PROPERTY(id(l)) { flex = 0; };
                        MOVE PROPERTY(name(l)) { flex = 1; fontSize = 16; }
                    }
                    NEW revenue {
                        horizontal = TRUE;
                        MOVE PROPERTY(dateTime(l));
                        MOVE PROPERTY(expectedRevenue(l));
                        MOVE PROPERTY(probability(l));
                        MOVE PROPERTY(expectedClosing(l));
                    }
                    NEW params {
                        lines = 2;
                        alignment = STRETCH;
                        MOVE PROPERTY(nameType(l));
                        MOVE PROPERTY(nameCustomer(l));
                        MOVE PROPERTY(email(l));
                        MOVE PROPERTY(phone(l));
                        MOVE PROPERTY(nameSalesPerson(l));
                        MOVE PROPERTY(namePriority(l));
                        MOVE PROPERTY(tags(l));
                    }
                }
                NEW details {
                    tabbed = TRUE;
                    fill = 1;
                    NEW description {
                        caption = 'Description';
                        MOVE PROPERTY(description(l)) { caption = ''; fill = 1; }
                    }
                    NEW otherInformation {
                        caption = 'Other information';
                        lines = 2;
                        MOVE PROPERTY(legalEntityName(l));
                        MOVE PROPERTY(website(l));
                        
                        NEW address {
                            alignment = STRETCH;
                            MOVE PROPERTY(address(l));
                            MOVE PROPERTY(city(l));
                            MOVE PROPERTY(state(l));
                            MOVE PROPERTY(zip(l));
                        }
                        
                        NEW contact {
                            alignment = STRETCH;
                            MOVE PROPERTY(firstName(l));
                            MOVE PROPERTY(lastName(l));
                            MOVE PROPERTY(middleName(l));
                            MOVE PROPERTY(namePosition(l));
                        }
                    }
                }
            }
            NEW rightPane {
                fill = 1;
                width = 200;
                NEW relatedDoc {
                    tabbed = TRUE;
                    alignment = STRETCH;
                }
            }
        }
    }
}

@defineFormStatusContainer(lead){
    DESIGN lead {
        NEW statusPane FIRST {
            horizontal = TRUE;
            alignment = STRETCH;
            NEW statusActions {
                horizontal = TRUE;
                flex = 1;
                NEW primaryActions {
                    horizontal = TRUE;
                }
                NEW secondaryActions {
                    horizontal = TRUE;
                }
            }
            NEW statusContainer {
                fill = 1;
                NEW status {
                    alignment = END;
                    horizontal = TRUE;
                }
            }
        }
    }
};
DESIGN lead {
    status {
        MOVE PROPERTY(nameStatus(l));
    }
}

showLead (LONG id) {
    FOR LONG(Lead l AS Lead) = id DO
        SHOW lead OBJECTS l = l DOCKED;
} @@api;

FORM leads '{Leads}'
    OBJECTS l = Lead BACKGROUND rgbColorPriority(l)
    PROPERTIES(l) READONLY dateTime, id, name, nameStatus,
                           nameType, nameCustomer, nameSalesPerson,
                           namePriority, tags, expectedClosing,
                           phone, email,
                           expectedRevenue, probability,
                           address, city, state, zip,
                           legalEntityName, website,
                           firstName, lastName, middleName, namePosition
    PROPERTIES(l) NEWSESSION NEW, EDIT, DELETE

    FILTERGROUP active
        FILTER 'Opened' opened(l) 'F8' DEFAULT
        FILTER 'Closed' closed(l) 'F7'

    FILTERGROUP my
        FILTER 'My leads' salesPerson(l) = currentUser() 'F6'

    LIST Lead OBJECT l
;

@defineDocObjectsForm(leads, l, 'Leads'){
    DESIGN leads {
        OBJECTS {
            NEW pane {
                fill = 1;
                horizontal = TRUE;
                NEW tabbedPane {
                    tabbed = TRUE;
                    fill = 1000;
                    MOVE BOX(l) { caption = 'Leads'; }
                }
                NEW rightPane {
                    tabbed = TRUE;
//                    width = 230;
                    fill = 1;
                    NEW filters {
                        caption = 'Filters';
                        alignment = STRETCH;
                        MOVE FILTERGROUPS(l) {
                            horizontal = FALSE;
                            alignment = STRETCH;
                        }
                    }
                    NEW actions {
                        alignment = STRETCH;
                        caption = 'Actions';
                        NEW statuses {
                            alignment = STRETCH;
                            caption = 'Change status';
                        }
                    }
                }
            }
        }
    }
};
    
@defineHistoryForm(lead, lead, l){
    EXTEND FORM lead
        OBJECTS leadl = LeadHistory
        PROPERTIES(leadl) READONLY dateTime, nameUser, hostnameComputer, type, description, pdescription = description PANEL
        FILTERS lead(leadl) = l
    ;

    DESIGN lead {
        details {
            NEW history {
                caption = badged('History', countHistories(l));
                fill = 1;
                horizontal = TRUE;
                MOVE BOX(leadl) {
                    fill = 2;
                    caption = '';
                    PROPERTY(description(leadl)) { valueHeight = 18; }
                }
                MOVE PROPERTY(pdescription) { panelCaptionVertical = TRUE; fill = 1; }
            }
        }
    }

    EXTEND FORM leads
        PROPERTIES(l) nameUserFirstHistory, dateTimeFirstHistory, nameUserLastHistory, dateTimeLastHistory
    ;
};

@defineObjectFiles(lead, l, 'Lead file'){

    CLASS LeadFile 'Lead file';

    lead = DATA Lead (LeadFile) INDEXED NONULL DELETE;

    file = DATA RAWFILE (LeadFile);

    name '{Name}' = DATA ISTRING (LeadFile) CHARWIDTH 15;
    extension 'Extension' = DATA ISTRING (LeadFile) CHARWIDTH 5;
    nameExtension (LeadFile f) = CONCAT '.', name(f), extension(f);

    description 'Description' = DATA ISTRING (LeadFile) CHARWIDTH 20;

    dateTime 'Date' = DATA DATETIME (LeadFile);
    dateTime(LeadFile f) <- currentDateTime() WHEN SET(f IS LeadFile);

    user = DATA User (LeadFile);
    nameUser 'User' (LeadFile f) = name(user(f));
    user(LeadFile f) <- currentUser() WHEN SET(f IS LeadFile);

    open 'Open' (LeadFile f) { open(file(f), nameExtension(f)); } IMAGE 'open.png';

    countFiles 'Files' (Lead i) = GROUP SUM 1 IF lead(LeadFile f) = i;

    index '{Index}' (LeadFile f) = PARTITION SUM 1 ORDER f BY lead(f) MATERIALIZED CHARWIDTH 3;
    file (Lead o, INTEGER i) = GROUP MIN LeadFile f IF lead(f) = o AND index(f) = i;
    openFile(Lead o, INTEGER i) { open(file(o, i)); }
    
    file1 (Lead o) = file(o, 1);
    file2 (Lead o) = file(o, 2);
    file3 (Lead o) = file(o, 3);
    openFile1 'File 1' (Lead o) { openFile(o, 1); }
    openFile2 'File 2' (Lead o) { openFile(o, 2); }
    openFile3 'File 3' (Lead o) { openFile(o, 3); }

    firstFile (Lead i) = GROUP MIN LeadFile f IF lead(f) = i;
    openFirstFile 'Open' (Lead i) { open(firstFile(i)); }
    openFiles 'Open' (Lead i) {
        FOR lead(LeadFile f) = i DO
            open(f);
    }

    newFile 'File' (Lead o) {
        INPUT uf = NAMEDFILE DO NEW uof = LeadFile {
            lead(uof) <- o;
            file(uof) <- RAWFILE(uf);
            name(uof) <- name(uf);
            extension(uof) <- extension(uf);
        }
    } IMAGE 'add.png' CHANGEKEY 'INSERT' HIDE;
        
    downloadLeadFile (LONG id) {
        FOR LONG(LeadFile f AS LeadFile) = id DO {
            exportNamedFile() <- namedFile(file(f), name(f), extension(f));
        } 
    } @@api;
        
    @defineObjectFilesForm(lead, lead, l){
    EXTEND FORM lead
        OBJECTS of = LeadFile
        PROPERTIES(of) READONLY index
        PROPERTIES(of) READONLYIF readonly(l) name, extension, description
        PROPERTIES(of) READONLY nameUser, dateTime
        PROPERTIES(of) GRID open, DELETE READONLYIF readonly(l)
        FILTERS lead(of) = l

        PROPERTIES(l) newFile DRAW of TOOLBAR READONLYIF readonly(l)
        PROPERTIES inputFile = '' CUSTOM 'inputFile' ON CHANGE {
            INPUT f = JSON DO
                IMPORT JSON FROM f FIELDS() STRING name, STRING extension, STRING data DO 
                    IF NOT readonly(l) THEN NEW uof = LeadFile {
                        lead(uof) <- l;
                        file(uof) <- decode(data, 'base64');
                        name(uof) <- name;
                        extension(uof) <- extension;
                    }
        }
    ;

    DESIGN lead {
        details {
            NEW files {
                caption = badged('Files', countFiles(l));
                MOVE BOX(of) { width = 600; caption = ''; }
                MOVE PROPERTY(inputFile);
            }
        }
    }
    
    // preview
    
    EXTEND FORM lead
        PROPERTIES() READONLY previewPdfFile SHOWIF previewPdfFile(), previewImageFile SHOWIF NOT previewPdfFile()

        EVENTS ON CHANGE of {
            previewPdfFile() <- NULL;
            previewImageFile() <- NULL;
            IF lower(extension(of)) = 'jpg' OR lower(extension(of)) = 'jpeg' OR lower(extension(of)) = 'png' OR lower(extension(of)) = 'bmp' THEN {
                previewImageFile() <- IMAGEFILE(file(of));
            }
            IF lower(extension(of)) = 'pdf' THEN {
                previewPdfFile() <- PDFFILE(file(of));
            }
            IF lower(extension(of)) = 'doc' OR lower(extension(of)) = 'docx' THEN {
                TRY {
                    wordToPdf(file(of));
                } CATCH {}
                previewPdfFile() <- exportPdfFile();
            }
        }
    ;

    DESIGN lead {
        files {
            horizontal = TRUE;
            height = 300;
            NEW preview {
                width = 300;
                height = 600;
                fill = 4;
                MOVE PROPERTY(previewPdfFile()) { fill = 1; size = (100, 100); caption = ''; }
                MOVE PROPERTY(previewImageFile()) { fill = 1; size = (100, 100); caption = ''; }
            }
        }
    }

};

};

@defineObjectActivity(lead, l, rightPane, fullName){
    
    EXTEND CLASS Lead : ActivityObject;
    name(Lead o) += fullName(o);

    EXTEND FORM lead
        OBJECTS act = Activity CUSTOM 'activities'
        PROPERTIES(act) nameType, dueDate, daysLeft, name, nameAssignedTo, description, done
        PROPERTIES setDone(act),
                   editAct = edit(act) ON CHANGE {
                        SHOW activity OBJECTS a = act FLOAT;
                   },
                   deleteAct = DELETE(act)
        ORDERS dueDate(act)
        FILTERS object(act) = l,
            NOT PREV(done(act))
    ;

    newActivity 'Add' (Lead o, ActivityType t) {
        NESTEDSESSION {
            NEW na = Activity {
                object(na) <- o;
                type(na) <- t;
                DIALOG activity OBJECTS a = na FLOAT;
            }
        }
    } IMAGE 'add.png';

    EXTEND FORM lead
        OBJECTS at = ActivityType BEFORE l

        PROPERTIES newActivity(l, at) COLUMNS (at) HEADER name(at)
    ;

    DESIGN lead {
        rightPane {
            NEW activities {
                showIf = countActivityTypes();
                alignment = STRETCH;
                caption = badged('Activities', countOpenedActivity(l));
                MOVE PROPERTY(newActivity(l, at));
                MOVE GRID(act) {
                    width = 400;
                    flex = 0;
                }
                REMOVE BOX(act);
            }
        }
    }

};

@defineObjectComments(lead, l, rightPane){
    CLASS LeadComment 'Comment';
    
    lead = DATA Lead (LeadComment) NONULL DELETE;
    countComment (Lead e) = GROUP SUM 1 IF lead(LeadComment c) = e MATERIALIZED;
    lastComment (Lead e) = GROUP LAST LeadComment c ORDER c BY lead(c) MATERIALIZED;
    
    dateTime 'Date' = DATA DATETIME (LeadComment);
    dateTime(LeadComment f) <- currentDateTime() WHEN SET(f IS LeadComment);
    
    user = DATA User (LeadComment);
    nameUser 'User' (LeadComment f) = name(user(f));
    user(LeadComment f) <- currentUser() WHEN SET(f IS LeadComment);
    
    text 'Text' = DATA RICHTEXT (LeadComment);
    
    header = ABSTRACT VALUE HTMLTEXT (LeadComment);
    footer = ABSTRACT VALUE HTMLTEXT (LeadComment);
    html (LeadComment c) = CONCAT '', header(c), text(c), footer(c);
    
    FORM editLeadComment 'Comment'
        OBJECTS c = LeadComment PANEL
        PROPERTIES(c) '' = text
    ;
    
    DESIGN editLeadComment {
        size = (640, 480);
        OBJECTS {
            MOVE PROPERTY(text(c)) { fill = 1; }
        }
    }
    
    EXTEND FORM lead
        OBJECTS cmt = LeadComment CUSTOM 'comments'
        PROPERTIES id = VALUE(cmt)
        PROPERTIES(cmt) nameUser, dateTime, text = html
        PROPERTIES(cmt) edit ON CHANGE {
            SHOW editLeadComment OBJECTS c = cmt;
        },
            delete = DELETE
        ORDERS id DESC
        FILTERS lead(cmt) = l
    ;
    
    newComment 'Add' (Lead t) {
        IF inputComment() THEN
            NEW nc = LeadComment {
                lead(nc) <- t;
                text(nc) <- inputComment();
                inputComment() <- NULL;
            }
    }
    
    EXTEND FORM lead
        PROPERTIES inputComment(), newComment(l)
        
        EVENTS ON APPLY { newComment(l); }
    ;
    
    DESIGN lead {
        rightPane {
            NEW comments {
                fill = 1;
                caption = badged('Comments', countComment(l));
                NEW inputComment {
                    horizontal = TRUE;
                    alignment = STRETCH;
                    MOVE PROPERTY(inputComment()) {
                        valueHeight = -1;
                        fill = 1;
                    }
                    MOVE PROPERTY(newComment(l)) {
                        alignment = STRETCH;
                    }
                }
                MOVE GRID(cmt) {
                    height = 200;
                    width = 400;
                    fill = 1;
                }
                REMOVE BOX(cmt);
            }
        }
    }
};

@defineObjectCommentsHistory(lead){
    comment = DATA LeadComment (LeadHistory) INDEXED;

    changes (LeadComment tc) = HTMLTEXT('<ul style="color:#959595">' + (GROUP CONCAT ('<li>' + type(LeadHistory th) + ' : ' + description(th) + '</li>') IF comment(th) = tc, '' ORDER th) + '</ul>');
    header (LeadComment tc) += changes(tc);

    WHEN SET(LeadComment tc IS LeadComment) AND SET(LeadHistory th IS LeadHistory) DO
        comment(th) <- tc;
};
@defineObjectCommentsCreate(lead, history){
    WHEN [GROUP SUM 1 IF SET(LeadHistory th IS LeadHistory) BY lead(th)](Lead t) AND NOT [GROUP SUM 1 IF SET(LeadComment tc IS LeadComment) BY lead(tc)](t) DO
        NEW tc = LeadComment {
            lead(tc) <- t;
        }
};

@defineObjectCommentsFiles(lead, CRM){
    comment = DATA LeadComment (LeadFile) INDEXED;

    files (LeadComment tc) = HTMLTEXT('<ul style="color:#959595">' + 
        (GROUP CONCAT ('<li><a target="_blank" href="' + contextUrl('/exec/CRM.downloadLeadFile?id=' + LeadFile tf) + '">' + nameExtension(tf) + '</a></li>') 
                      IF comment(tf) = tc, '' ORDER tf) + '</ul>');
    footer (LeadComment tc) += files(tc);

    WHEN SET(LeadComment tc IS LeadComment) AND SET(LeadFile tf IS LeadFile) DO
        comment(tf) <- tc;
};
@defineObjectCommentsCreate(lead, file){
    WHEN [GROUP SUM 1 IF SET(LeadFile th IS LeadFile) BY lead(th)](Lead t) AND NOT [GROUP SUM 1 IF SET(LeadComment tc IS LeadComment) BY lead(tc)](t) DO
        NEW tc = LeadComment {
            lead(tc) <- t;
        }
};

@defineObjectCommentsActivity(lead){
    
    WHEN SET(done(Activity a)) AND Lead o = object(a) AND o IS Lead DO NEW oc = LeadComment {
        lead(oc) <- o;
        text(oc) <- CONCAT '', '<h5>' + (CONCAT ' : ', nameType(a), name(a)) + '</h5>',
            (CONCAT '<b>' + 'Description' + ' :</b>', (feedback(a) IF feedback(a) != ''), description(a));
    }
    
};

@defineDocStatusChange(lead, 'Lead'){
    CLASS LeadStatusChange 'Lead';

    lead = DATA Lead (LeadStatusChange);
    countStatusChange (Lead o) = GROUP SUM 1 IF lead(LeadStatusChange sc) = o;
    
    dateTime 'Date' = DATA DATETIME (LeadStatusChange);
    dateTime(LeadStatusChange sc) <- currentDateTime() WHEN SET(sc IS LeadStatusChange);

    INDEX lead(LeadStatusChange sc), dateTime(sc), sc;

    user 'User' = DATA User (LeadStatusChange);
    nameUser 'User' (LeadStatusChange sc) = name(user(sc));
    user(LeadStatusChange sc) <- currentUser() WHEN SET(sc IS LeadStatusChange);

    status 'Status' = DATA LeadStatus (LeadStatusChange);
    nameStatus 'Status' (LeadStatusChange sc) = name(status(sc));

    previous (LeadStatusChange c) = PARTITION PREV c ORDER dateTime(c), c BY lead(c);
    dateTimePrevious (LeadStatusChange c) = dateTime(previous(c));
    secondsBefore (LeadStatusChange c) = subtractSeconds(dateTimePrevious(c), dateTime(c));
    hoursBefore 'Hours before' (LeadStatusChange c) = round2(secondsBefore(c) / 3600);

    nameUserPrevious (LeadStatusChange c) = nameUser(previous(c));
    
    next (LeadStatusChange c) = PARTITION PREV c ORDER DESC dateTime(c), c BY lead(c);
    dateTimeNext  (LeadStatusChange c) = dateTime(next(c));
    secondsAfter (LeadStatusChange c) = subtractSeconds(dateTime(c), dateTimeNext(c));
    hoursAfter 'Hours after' (LeadStatusChange c) = round2(secondsAfter(c) / 3600);
    
    nameUserNext (LeadStatusChange c) = nameUser(next(c));
        
    lastChange (Lead o, LeadStatus s) = GROUP LAST LeadStatusChange sc ORDER dateTime(sc), sc BY lead(sc), status(sc);
        
    dateTimeLastChange 'Date' (Lead o, LeadStatus s) = dateTime(lastChange(o, s));
    nameUserLastChange 'User' (Lead o, LeadStatus s) = nameUser(lastChange(o, s));

    secondsBefore (Lead o, LeadStatus s) = GROUP SUM secondsBefore(LeadStatusChange sc) IF lead(sc) = o AND status(sc) = s;
    hoursBefore 'Hours before' (Lead o, LeadStatus s) = round2(secondsBefore(o, s) / 3600);

    secondsAfter (Lead o, LeadStatus s) = GROUP SUM secondsAfter(LeadStatusChange sc) IF lead(sc) = o AND status(sc) = s;
    hoursAfter 'Hours after' (Lead o, LeadStatus s) = round2(secondsAfter(o, s) / 3600);
        
    WHEN SETCHANGED(status(Lead o)) DO 
        NEW sc = LeadStatusChange {
            lead(sc) <- o;
            status(sc) <- status(o);
        }
};
@defineDocStatusChangeForm(lead, l, 'Lead'){
    EXTEND FORM lead
        OBJECTS stch = LeadStatusChange
        PROPERTIES(stch) READONLY dateTime, nameUser, hoursBefore, nameStatus, hoursAfter
        FILTERS lead(stch) = l
    ;
    
    DESIGN lead {
        details {
            MOVE BOX(stch) { 
                caption = badged('Status change', countStatusChange(l));
            }
        }
    }
    
    EXTEND FORM leads
        OBJECTS lst = LeadStatus BEFORE l
        PROPERTIES sortingOrder(lst)
        ORDERS sortingOrder(lst)
        
        PROPERTIES(l, lst) READONLY COLUMNS 'status' (lst) BACKGROUND RGB(224,224,224) IF mod(index(lst), 2) = 0
            hoursBefore HEADER name(lst) + '\n(' + 'Hours before' + ')', 
            dateTimeLastChange HEADER name(lst) + '\n(' + 'Date' + ')', 
            nameUserLastChange HEADER name(lst) + '\n(' + 'User' + ')', 
            hoursAfter HEADER name(lst) + '\n(' + 'Hours after' + ')'
    ;
    
    DESIGN leads {
        REMOVE BOX(lst);
        
        PROPERTY(hoursBefore(l, lst)) { hide = TRUE; }
        PROPERTY(dateTimeLastChange(l, lst)) { hide = TRUE; }
        PROPERTY(nameUserLastChange(l, lst)) { hide = TRUE; }
        PROPERTY(hoursAfter(l, lst)) { hide = TRUE; }
    }
};

DESIGN leads {
    PROPERTY(tags(l)) { valueHeight = 18; }
}

NAVIGATOR {
    operations {
        NEW leads;
    }
}

// copy
clone ABSTRACT LIST (Lead, Lead);
clone (Lead to, Lead from) + {
    name(to) <- name(from);
    type(to) <- type(from);
    customer(to) <- customer(from);
    salesPerson(to) <- salesPerson(from);
    
    description(to) <- description(from);
    priority(to) <- priority(from);
    
    in(to, LeadTag t) <- in(from, t);

    expectedRevenue(to) <- expectedRevenue(from);
    probability(to) <- probability(from);

    phone(to) <- phone(from);
    email(to) <- email(from);
    
    address(to) <- address(from);
    city(to) <- city(from);
    state(to) <- state(from);
    zip(to) <- zip(from);
    
    website(to) <- website(from);
    legalEntityName(to) <- legalEntityName(from);

    firstName(to) <- firstName(from);
    lastName(to) <- lastName(from);
    middleName(to) <- middleName(from);

    position(to) <- position(from);
}

copy 'Copy' (Lead from)  {
    NEWSESSION {
        NEW to = Lead {
            clone(to, from);
            SHOW lead OBJECTS l = to DOCKED;
        }
    }
}
EXTEND FORM lead PROPERTIES(l) copy;

DESIGN lead {
    secondaryActions {
        MOVE PROPERTY(copy(l)) { valueClass = 'btn-secondary'; }
    }
}